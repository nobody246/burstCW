(use bitstring posix)
;(define file-in "forward.wav")
;(define file-out "reversed.wav")
(define cli (command-line-arguments))
(define args `(,(member "slow" cli)
               ,(member "file" cli)
               ,(member "o" cli)))
(define file-in #f)
(define file-out #f)
(define slowdown-x 1)
(define rev (member "reverse" cli))
(define (usage)
  (print "wavrx.scm file in.wav o out.wav [slow (# of times to slow sound)] [reverse]")
  (exit))
(let ((check (lambda (x)
               (when (or (not x) (< (length x) 2))
                 (usage)))))
  (for-each
   (lambda (x)
     (and-let* ((x x)
                (y (car x)))
       (cond ((equal? y "slow") (check x) (set! slowdown-x (string->number (cadr x))))
             ((equal? y "file") (check x) (set! file-in  (cadr x)))
             ((equal? y "o")    (check x) (set! file-out (cadr x))))))
   args))
(when (or (not file-in) (not file-out))
  (usage))
(define f (file-open file-in
                     (+ open/read open/binary)))
(define fo (file-open file-out
                      (+ open/rdwr open/creat open/trunc open/binary)
                      (+ perm/irusr perm/iwusr)))
(bitmatch
 (car (file-read f 44))
 (((chunk-id 32 bitstring)
   (chunk-size 32 little unsigned)
   (riff-type 32 bitstring)
   (fmt-chunk-id 32 bitstring)
   (fmt-chunk-size 32 little unsigned)
   (fmt-chunk-compression-type 16 little unsigned)
   (fmt-chunk-channels 16 little unsigned)
   (fmt-chunk-slice-rate 32 little unsigned)
   (fmt-chunk-data-rate 32 little unsigned)
   (fmt-chunk-block-alignment 16 little unsigned)
   (fmt-chunk-sample-depth 16 little unsigned)
   (data-chunk-id 32 bitstring)
   (data-chunk-size 32 little unsigned))
  (let ((new-slice-rate (inexact->exact (round (/ fmt-chunk-slice-rate slowdown-x))))
        (new-chunk-data-rate (inexact->exact (round (/ fmt-chunk-data-rate slowdown-x)))))
     (file-write
      fo
      (bitstring->blob
       (bitconstruct
        (chunk-id 32  bitstring)
        (chunk-size 32 little unsigned)
        (riff-type  bitstring)
        (fmt-chunk-id  bitstring)
        (fmt-chunk-size 32 little unsigned)
        (fmt-chunk-compression-type 16 little unsigned)
        (fmt-chunk-channels 16 little unsigned)
        (new-slice-rate 32 little unsigned)
        (new-chunk-data-rate 32 little unsigned)
        (fmt-chunk-block-alignment 16 little unsigned)
        (fmt-chunk-sample-depth 16 little unsigned)
        (data-chunk-id  bitstring)
        (data-chunk-size 32 little unsigned)))))))
(if rev
    (let ((new-list '())
          (sample '()))
      (for-each
       (lambda (x)
         (set! sample (append sample `(,x)))
         (when (= (length sample) 2)
           (set! new-list (append sample new-list))
           (set! sample '())))
       (string->list (car (file-read f (- (file-size f) 44)))))
      (file-write fo (list->string new-list)))
    (file-write fo (car (file-read f (- (file-size f) 44)))))
(file-close fo)
(file-close f)
(exit)
