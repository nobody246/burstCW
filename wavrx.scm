(use bitstring posix)
(define file-in "burstCW.wav")
(define file-out "burstCWSlowed.wav")
(define slowdown-x (string->number (car (reverse (command-line-arguments)))))
(when (not slowdown-x)
  (set! slowdown-x 1))
(define f (file-open file-in
                     (+ open/read open/binary)))
(define fo (file-open file-out
                      (+ open/rdwr open/creat open/trunc open/binary)
                      (+ perm/irusr perm/iwusr)))
(bitmatch
 (car (file-read f 44))
 (((chunk-id 32 bitstring)
   (chunk-size 32 little unsigned)
   (riff-type 32 bitstring)
   (fmt-chunk-id 32 bitstring)
   (fmt-chunk-size 32 little unsigned)
   (fmt-chunk-compression-type 16 little unsigned)
   (fmt-chunk-channels 16 little unsigned)
   (fmt-chunk-slice-rate 32 little unsigned)
   (fmt-chunk-data-rate 32 little unsigned)
   (fmt-chunk-block-alignment 16 little unsigned)
   (fmt-chunk-sample-depth 16 little unsigned)
   (data-chunk-id 32 bitstring)
   (data-chunk-size 32 little unsigned))
  (let ((new-slice-rate (inexact->exact (round (/ fmt-chunk-slice-rate slowdown-x)))))
     (print "Slowing down " fmt-chunk-slice-rate " by "
            slowdown-x " times, new rate is " new-slice-rate)
     (file-write
      fo
      (bitstring->blob
       (bitconstruct
        (chunk-id 32  bitstring)
        (chunk-size 32 little unsigned)
        (riff-type  bitstring)
        (fmt-chunk-id  bitstring)
        (fmt-chunk-size 32 little unsigned)
        (fmt-chunk-compression-type 16 little unsigned)
        (fmt-chunk-channels 16 little unsigned)
        (new-slice-rate 32 little unsigned)
        (fmt-chunk-data-rate 32 little unsigned)
        (fmt-chunk-block-alignment 16 little unsigned)
        (fmt-chunk-sample-depth 16 little unsigned)
        (data-chunk-id  bitstring)
        (data-chunk-size
         32 little unsigned)))))))
(file-write fo (car (file-read f (- (file-size f) 44))))
(file-close fo)
(file-close f)
(exit)
